#!/bin/bash

# Ubuntu 24.04 LTS Initial Setup Script
# This script runs on first boot to configure the system

set -e

# Log everything
exec > >(tee /var/log/azure-ubuntu-setup.log)
exec 2>&1

echo "Starting Ubuntu 24.04 LTS setup at $(date)"

# Update system packages
echo "Updating system packages..."
apt-get update -y
DEBIAN_FRONTEND=noninteractive apt-get upgrade -y

# Set timezone
echo "Setting timezone to ${timezone}"
timedatectl set-timezone "${timezone}"

# Install essential packages
echo "Installing essential packages..."
DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl \
    wget \
    git \
    unzip \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    htop \
    tree \
    vim \
    nano \
    net-tools \
    jq \
    telnet \
    rsync \
    fail2ban \
    ufw \
    chrony

# Configure automatic security updates
echo "Configuring automatic security updates..."
DEBIAN_FRONTEND=noninteractive apt-get install -y unattended-upgrades
echo 'Unattended-Upgrade::Automatic-Reboot "false";' >> /etc/apt/apt.conf.d/50unattended-upgrades

# Configure UFW (Uncomplicated Firewall)
echo "Configuring UFW firewall..."
ufw --force enable
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh

%{ if enable_syslog_server }
# Configure syslog server ports
%{ if syslog_protocol == "udp" || syslog_protocol == "both" }
ufw allow ${syslog_port}/udp comment 'Syslog UDP'
%{ endif }
%{ if syslog_protocol == "tcp" || syslog_protocol == "both" }
ufw allow ${syslog_port}/tcp comment 'Syslog TCP'
%{ endif }
%{ if enable_syslog_tls }
ufw allow 6514/tcp comment 'Syslog TLS'
%{ endif }
%{ endif }

# Configure fail2ban for SSH protection
echo "Configuring fail2ban..."
systemctl enable fail2ban
systemctl start fail2ban

# Create admin user home directory structure if it doesn't exist
echo "Setting up admin user: ${admin_username}"
if [ ! -d "/home/${admin_username}" ]; then
    mkdir -p /home/${admin_username}
    chown ${admin_username}:${admin_username} /home/${admin_username}
fi

# Set up SSH directory
mkdir -p /home/${admin_username}/.ssh
chown ${admin_username}:${admin_username} /home/${admin_username}/.ssh
chmod 700 /home/${admin_username}/.ssh

# Configure SSH for security
echo "Configuring SSH security..."
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config
sed -i 's/#AuthorizedKeysFile/AuthorizedKeysFile/' /etc/ssh/sshd_config

# Restart SSH service
systemctl restart ssh

# Configure chrony for time synchronization
echo "Configuring chrony..."
systemctl enable chrony
systemctl start chrony

# Set up log rotation
echo "Configuring log rotation..."
cat > /etc/logrotate.d/azure-setup << EOF
/var/log/azure-ubuntu-setup.log {
    weekly
    rotate 4
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
}
EOF

# Clean up
echo "Cleaning up..."
apt-get autoremove -y
apt-get autoclean

# Set up a simple MOTD
echo "Setting up MOTD..."
cat > /etc/motd << EOF

Welcome to Ubuntu 24.04 LTS on Azure
=====================================

This virtual machine was provisioned by Terraform.

System Information:
- OS: Ubuntu 24.04 LTS
- Timezone: ${timezone}
- Admin User: ${admin_username}

Security Features:
- UFW Firewall: Enabled
- Fail2ban: Enabled  
- SSH Key Authentication: Enabled
- Password Authentication: Disabled
- Automatic Security Updates: Enabled

%{ if enable_syslog_server }
Syslog Server:
- Status: ENABLED
- Port: ${syslog_port}
- Protocol: ${syslog_protocol}
- TLS: ${enable_syslog_tls ? "Enabled" : "Disabled"}
- Log Location: /var/log/remote/
- Config: /etc/rsyslog.d/50-remote.conf

%{ endif }
Useful Commands:
- Check system status: systemctl status
- View logs: journalctl -f
- Firewall status: ufw status
- Update system: sudo apt update && sudo apt upgrade
%{ if enable_syslog_server }
- Check syslog: systemctl status rsyslog
- View remote logs: tail -f /var/log/remote/*.log
%{ endif }

EOF

%{ if enable_syslog_server }
# Configure Syslog Server
echo "Configuring rsyslog server..."

# Install rsyslog if not present (should be default on Ubuntu)
apt-get install -y rsyslog rsyslog-gnutls

# Create directory for remote logs
mkdir -p /var/log/remote
chown syslog:adm /var/log/remote
chmod 755 /var/log/remote

# Backup original rsyslog configuration
cp /etc/rsyslog.conf /etc/rsyslog.conf.backup

# Create syslog server configuration
cat > /etc/rsyslog.d/50-remote.conf << 'SYSLOG_EOF'
# Remote Syslog Server Configuration
# Generated by Terraform

# Enable reception of messages
%{ if syslog_protocol == "udp" || syslog_protocol == "both" }
# UDP reception
module(load="imudp")
input(type="imudp" port="${syslog_port}")
%{ endif }

%{ if syslog_protocol == "tcp" || syslog_protocol == "both" }
# TCP reception
module(load="imtcp")
input(type="imtcp" port="${syslog_port}")
%{ endif }

%{ if enable_syslog_tls }
# TLS reception (port 6514)
module(load="imtcp" StreamDriver.Name="gtls" StreamDriver.Mode="1")
input(type="imtcp" port="6514" StreamDriver.Name="gtls" StreamDriver.Mode="1" StreamDriver.Authmode="anon")
%{ endif }

# Template for remote log file names
template(name="RemoteHostTemplate" type="string" string="/var/log/remote/%HOSTNAME%/%PROGRAMNAME%.log")

# Filter messages from allowed networks only
%{ for network in syslog_allowed_networks }
:fromhost-ip, startswith, "${cidrhost(network, 0)}" ?RemoteHostTemplate
%{ endfor }

# Stop processing remote messages locally
:fromhost-ip, !isequal, "127.0.0.1" stop

# Custom filtering rules
%{ for rule in syslog_custom_rules }
${rule}
%{ endfor }
SYSLOG_EOF

# Configure log rotation for remote logs
cat > /etc/logrotate.d/remote-syslog << 'LOGROTATE_EOF'
/var/log/remote/*/*.log {
    daily
    rotate ${syslog_log_retention_days}
    size ${syslog_max_log_size}
    compress
    delaycompress
    missingok
    notifempty
    create 644 syslog adm
    postrotate
        /usr/lib/rsyslog/rsyslog-rotate
    endscript
}
LOGROTATE_EOF

%{ if enable_syslog_tls }
# Generate self-signed certificate for TLS (production should use proper certs)
if [ ! -f /etc/ssl/rsyslog-server.pem ]; then
    echo "Generating self-signed certificate for syslog TLS..."
    openssl req -x509 -newkey rsa:4096 -keyout /etc/ssl/rsyslog-server.key \
        -out /etc/ssl/rsyslog-server.pem -days 365 -nodes \
        -subj "/C=GB/ST=England/L=London/O=Organization/CN=$(hostname)"
    
    chmod 600 /etc/ssl/rsyslog-server.key
    chmod 644 /etc/ssl/rsyslog-server.pem
    chown root:root /etc/ssl/rsyslog-server.*
    
    # Add TLS configuration to rsyslog
    cat >> /etc/rsyslog.d/50-remote.conf << 'TLS_EOF'

# TLS Configuration
global(
    DefaultNetstreamDriver="gtls"
    DefaultNetstreamDriverCAFile="/etc/ssl/rsyslog-server.pem"
    DefaultNetstreamDriverCertFile="/etc/ssl/rsyslog-server.pem"
    DefaultNetstreamDriverKeyFile="/etc/ssl/rsyslog-server.key"
)
TLS_EOF
fi
%{ endif }

# Create syslog monitoring script
cat > /usr/local/bin/syslog-monitor.sh << 'MONITOR_EOF'
#!/bin/bash

# Syslog Server Monitoring Script
echo "Syslog Server Status Report"
echo "=========================="
echo "Date: $(date)"
echo ""

# Check rsyslog service
echo "Rsyslog Service Status:"
systemctl is-active rsyslog && echo "✓ Service: RUNNING" || echo "✗ Service: STOPPED"
echo ""

# Check listening ports
echo "Listening Ports:"
%{ if syslog_protocol == "udp" || syslog_protocol == "both" }
netstat -ulnp | grep ":${syslog_port}" && echo "✓ UDP ${syslog_port}: LISTENING" || echo "✗ UDP ${syslog_port}: NOT LISTENING"
%{ endif }
%{ if syslog_protocol == "tcp" || syslog_protocol == "both" }
netstat -tlnp | grep ":${syslog_port}" && echo "✓ TCP ${syslog_port}: LISTENING" || echo "✗ TCP ${syslog_port}: NOT LISTENING"
%{ endif }
%{ if enable_syslog_tls }
netstat -tlnp | grep ":6514" && echo "✓ TLS 6514: LISTENING" || echo "✗ TLS 6514: NOT LISTENING"
%{ endif }
echo ""

# Check remote log directory
echo "Remote Logs:"
if [ -d /var/log/remote ]; then
    echo "✓ Directory: /var/log/remote exists"
    echo "  Hosts logging: $(ls /var/log/remote 2>/dev/null | wc -l)"
    echo "  Total log files: $(find /var/log/remote -name "*.log" 2>/dev/null | wc -l)"
    echo "  Disk usage: $(du -sh /var/log/remote 2>/dev/null | cut -f1)"
else
    echo "✗ Directory: /var/log/remote missing"
fi
echo ""

# Recent connections
echo "Recent Syslog Activity (last 10 lines):"
tail -10 /var/log/syslog | grep rsyslog || echo "No recent rsyslog activity"
MONITOR_EOF

chmod +x /usr/local/bin/syslog-monitor.sh

# Create systemd service for syslog monitoring
cat > /etc/systemd/system/syslog-monitor.service << 'SERVICE_EOF'
[Unit]
Description=Syslog Server Monitoring
After=rsyslog.service

[Service]
Type=oneshot
ExecStart=/usr/local/bin/syslog-monitor.sh
User=root

[Install]
WantedBy=multi-user.target
SERVICE_EOF

# Create timer for periodic monitoring
cat > /etc/systemd/system/syslog-monitor.timer << 'TIMER_EOF'
[Unit]
Description=Run syslog monitoring every hour
Requires=syslog-monitor.service

[Timer]
OnCalendar=hourly
Persistent=true

[Install]
WantedBy=timers.target
TIMER_EOF

# Enable and start services
systemctl daemon-reload
systemctl enable syslog-monitor.timer
systemctl start syslog-monitor.timer

# Restart rsyslog to apply configuration
systemctl restart rsyslog
systemctl enable rsyslog

echo "Syslog server configuration completed!"
echo "To monitor: sudo /usr/local/bin/syslog-monitor.sh"
echo "Config file: /etc/rsyslog.d/50-remote.conf"
echo "Remote logs: /var/log/remote/"

%{ endif }

# Create completion marker
touch /var/log/azure-ubuntu-setup-complete

echo "Ubuntu 24.04 LTS setup completed successfully at $(date)"
echo "System is ready for use!"
